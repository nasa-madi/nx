file: default.yml
host: localhost
port: 3030
public: "./public/"
origins:
  - http://localhost:3030
paginate:
  default: 10
  max: 50

# TESTING
debug: false
verbose: false

# DATABASE
postgresql:
  client: pg
  connection:
    host: localhost
    user: unicorn_user
    password: magical_password
    database: rainbow_database
    port: 5432
  pool: 
    min: 0
    max: 100
    idleTimeoutMillis: 5000
  #   createTimeoutMillis: 30000
  #   acquireTimeoutMillis: 60000
  debug: false
  automigrate: false
  autoseed: false

# PARSER SERVICE
parser:
  nlm:
    host: http://localhost:5001

# API KEYS
openai: 
  key: sk-XXXXXXXXXXXXXXXXXXXXXXXXXXX
  # MODEL OPTIONS
  max_tokens_llm: 4000
  use_proxy: false
  proxy_port: 8888

# DOCUMENT SERVICE
chunks:
  maxLength: 2000
  overlap: 300
  size: 2000

# STORAGE SERVICE
storage:
  default: gcs
  gcs:
    allowDuplicates: false
    projectId: test
    bucket: madi-sample-bucket
    useMetadataInHash: true

    # local only settings
    local: true
    keyFilename: ./test/contracts/credentials.json
    apiEndpoint: http://localhost:9023

  
# AUTHENTICATION SERVICE
authentication:
  entity: user
  service: users
  client_id: XXX
  secret: XXXXXXXXXXXXXXXXXXXXXXXXXXX
  authStrategies:
    - googleIAP
    - googleCLI
    - jwt
    - zitadel
  googleIAP:
    emailField: email
    idField: googleId
  googleCLI:
    emailField: email
    idField: googleId 
  jwtOptions:
    algorithm: HS256
    expiresIn: 1d
    header:
      typ: access
    issuer: https://your-zitadel-instance.com
    audience: https://your-app.com
  oauth:
    zitadel:
      key: "YOUR_CLIENT_ID"
      secret: "YOUR_CLIENT_SECRET"
      scope: ["openid", "profile", "email"]
      authEndpoint: "https://your-zitadel-instance.com/oauth/v2/authorize"
      tokenEndpoint: "https://your-zitadel-instance.com/oauth/v2/token"
      userProfileEndpoint: "https://your-zitadel-instance.com/oauth/v2/userinfo"

# PLUGIN SERVICES
plugins:
  failOnImportError: true
  path: ../plugins
  start: index.js
  default:
    - armdEbooks
    - casHIT
    - casScamper
    - casScenarios
    - searchSemanticScholar
    - casConfluence
    - casCompost
  restricted:
    # - searchPatents
  development:
    - devGetWeather

